#Problem Statement:
- You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
- On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
- However, you can buy it then immediately sell it on the same day.
- Find and return the maximum profit you can achieve.

#Solution:
int maxProfit(vector<int>& prices) 
{
    int i, buy, sell, profit = 0;
    while(i < prices.size()-1)
    {
         while(i < prices.size()-1 && prices[i+1] <= prices[i])i++;
         buy = prices[i];
         while(i < prices.size()-1 && prices[i+1] > prices[i])i++;
         sell = prices[i];
         profit += sell-buy;
    }
    return profit;
}

More Simplified Code-

int maxProfit(vector<int>& prices) 
{
      int profit = 0;
      for(int i = 1; i < prices.size(); i++)
      {
          if(prices[i]>prices[i-1]){
              profit+=(prices[i]-prices[i-1]);
          }
      }
      return profit;
}

Time Complexity - O(N)
Space Complexity - O(1)
