#Problem Statement:
- Given an array nums of size n, return the majority element.
- The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

#Solution:
1. Sorting and return element repeated n/2 more times

2. Use hash map to store frequenecy of elements.

3. Optimized solution - Time:O(N), Space:O(1)
int majorityElement(vector<int>& nums) 
{
    int majorElement = nums[0], count = 1;
    for(int i = 1; i < nums.size(); i++)
    {
        if(count == 0)
        {
            majorElement = nums[i];
            count++;
        }
        else if(majorElement == nums[i])
        {
            count++;
        }
        else count--;
    }
    return majorElement;
}

4. Bit manipulation - Time:(26*N), Space:O(1)
int majorityElement(vector<int>& nums) 
{
    int majority = 0;
    for (unsigned int i = 0, mask = 1; i < 32; i++, mask <<= 1) 
    {
        int bits = 0;
        for (int num : nums) 
        {
            if (num & mask) {
                bits++;
            }
        }
        if (bits > nums.size() / 2) {
            majority |= mask;
        }
    }
    return majority;
}
