#Problem Statement:
- Given an m x n grid of characters board and a string word, return true if word exists in the grid.
- The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
  The same letter cell may not be used more than once.

#Solution:
Solved using Matrix + Backtracking.

bool checkWordPresent(vector<vector<char>>& board, string word, int row, int col, int index,vector<vector<bool>>&visited)
{
     if(index == word.size())return true;
     visited[row][col] = 1;
     int n = board.size();
     int m = board[0].size();
     int rr[] = {-1, 0, 1, 0};
     int cc[] = {0, 1, 0, -1};
    
    for (int i = 0; i < 4; i++)
    {
        int r = row + rr[i];
        int c = col + cc[i];
  
        if (r < n && r >= 0 && c < m && c >= 0 && !visited[r][c] && word[index] == board[r][c])
        {
            if (checkWordPresent(board, word, r, c, index+1, visited) == true)
            {
                return true;
            }
        }
    }
    visited[row][col] = 0;
    return false;
}
bool exist(vector<vector<char>>& board, string word) 
{
    vector<vector<bool>>visited(board.size(),vector<bool>(board[0].size(),0));
    for(int i = 0; i < board.size(); i++)
    {
      for(int j = 0; j < board[0].size(); j++)
      {
          if(board[i][j] == word[0])
          {
              bool res = checkWordPresent(board,word,i,j,1,visited);
              if(res)return res;
          }
      }
    }
    return false;
}
Time Complexity:  O(N*M*4^L), where L is the length of the word. And we are searching for the letter N*M
times in the worst case. Here 4 in 4^K is because at each level of our decision tree we are making 4
recursive calls which equal 4^K in the worst case.

Space Complexity : O(L) : where L is the length of the given word. This space is used for recursion stack.
