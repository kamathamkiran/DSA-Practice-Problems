#Problem Statement:
- There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.
- In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.
- Your score is the sum of the points of the cards you have taken.
- Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

#Solution:
1. Recursive Solution

int solve(vector<int>v,int low, int high, int count, int k)
{
    if(count == k)return 0;
    return max(v[low]+solve(v,low+1,high,count+1,k), v[high]+solve(v,low,high-1,count+1,k));
}
Time Complexity - O(2^N)

2. Two traversal Solution.
- Let the sum of all points be total_pts. You need to remove a sub-array from cardPoints with length n - k.
- Keep a window of size n - k over the array. The answer is max(answer, total_pts - sumOfCurrentWindow)

int maxScore(vector<int>& v, int k) 
{
    int n = v.size();
    for(int i = 1; i < n; i++)
    {
        v[i] += v[i-1];
    }
    int len = v.size()-k;
    if(len == 0)return v[n-1];
    int totalSum = v[n-1], result = v[n-1] - v[len-1];
    for(int i = len; i < n; i++)
    {
        int curWindowSum = v[i] - v[i-len];
        result = max(result,totalSum-curWindowSum);
    }
    return result;
}
TimeComplexity - O(N) - But two times trvaersal.

3. Single traversal Solution 

int maxScore(vector<int>& cardPoints, int k) 
{
    int res = 0;
    for(int i=0;i<k;i++)  //First k elements in our window
     {  
         res+=cardPoints[i];
     }
    int curr=res;
    for(int i=k-1;i>=0;i--) 
    {
        //We remove the last visited element and add the non-visited element from the last
        curr-=cardPoints[i];
        curr+=cardPoints[cardPoints.size()-k+i];
  
        res = max(res, curr);
    }
    return res;
}
TimeComplexity - O(N) - But one time trvaersal only.
