#Problem Statement:
- You are given an integer array nums. You are initially positioned at the array's first index, 
  and each element in the array represents your maximum jump length at that position.
- Return true if you can reach the last index, or false otherwise.

#Solution:
1. Recursive Solution ( Time-O(2^N) )
bool solve(vector<int>& nums, int index,vector<bool>&visited)
{
    if(visited[index])
       return false;
    if(index == nums.size()-1 || nums[index]+index >= nums.size()-1)
           return true;
    visited[index] = true;

    if(nums[index] == 0)
        return false;
    for(int i = 0; i < nums[index]; i++)
    {
        if(solve(nums,index+i+1,visited))
           return true;
    }
    return false;
}

2. Dynamic Programming ( Time: O(N*N), Space - O(N) )
bool canJump(vector<int>& nums) 
{
    int n = nums.size();
    vector<int> dp(n, -1);
    dp[n-1] = 1; //base case;

    for(int idx = n-2; idx >= 0; idx--) 
    {
          if(nums[idx] == 0) {
              dp[idx] = false;
              continue;   
          } 
          int flag = 0;
          int reach = idx + nums[idx];
          for(int jump=idx + 1; jump <= reach; jump++) {
              if(jump < nums.size() && dp[jump]) {
                  dp[idx] = true;
                  flag = 1;  
                  break;
              }
          }
          if(flag == 1) 
              continue;       
          else dp[idx] = false;  
    }
    return dp[0]; 
}

3. Optimized Solution ( Time: O(N), Space:O(1) )
- I think of a solution that kinda resembles Kadane's algorithm. For every index, I'm checking the max reach I can have till that element, 
  if that reach is less than the value of my index, that means I can never reach this particular index and my answer should be false.
bool canJump(vector<int>& nums) 
{
    int n = nums.size();
    int maxReach = 0;
    for (int i = 0; i < n; i++) 
    {
        if (maxReach < i) return false;
        maxReach = max(maxReach, i + nums[i]);
    }
    return true;
}
