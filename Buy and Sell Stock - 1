#Problem Statement:
- You are given an array prices where prices[i] is the price of a given stock on the ith day.
- You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
- Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

#Solution:

* Solved using Array(Two Nested Loop). Brute Force Approach. TC: O(N*N), SC: O(1)

int maxProfit(vector<int>& prices) 
{
    int n = prices.size(), maxProfit = 0;
    for(int i=0; i<n-1; i++){
        for(int j=i+1; j<n; j++){
            if(prices[j] - prices[i] > maxProfit){
                maxProfit = prices[j] - prices[i];
            }
        }
    }
    return maxProfit;
}

* Solved using Dynamic Programming Approach (tabulation). TC: O(N), SC: O(N)

int maxProfit(vector<int>& prices) 
{
    int n = prices.size();
    vector<int> maxPrices(n, 0);
    maxPrices[n-1] = prices[n-1];
    for(int i=n-2; i>=0; i--){
        maxPrices[i] = max(maxPrices[i+1], prices[i]); 
    }
    int maxProfit = 0;
    for(int i=0; i<n; i++){
        maxProfit = max(maxProfit, maxPrices[i] - prices[i]); 
    }
    return maxProfit;
}

* Solved using Dynamic Programming Approach(Space optimization). TC: O(N), SC: O(1)

int maxProfit(vector<int>& prices)
{
    int n = prices.size();
    int buyAtPrice = INT_MAX;
    int maxProfit = 0;
    for(int i=0; i<n; i++)
    {
        buyAtPrice = min(buyAtPrice, prices[i]);
        maxProfit = max(maxProfit, prices[i] - buyAtPrice); 
    }
    return maxProfit;
}
